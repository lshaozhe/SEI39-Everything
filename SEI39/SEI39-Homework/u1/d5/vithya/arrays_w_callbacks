////////////////////////////////////////////////////////////////////////////////////////
// Array methods with callbacks

const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0];

const panagram = [
  "The",
  "quick",
  "brown",
  "fox",
  "jumps",
  "over",
  "the",
  "lazy",
  "dog",
];

////////////////////////////////////////////////////////////////////////////////////////
// Every
// 1. Determine if every number is greater than or equal to 0
function positiveNumber(number) {
  return number >= 0;
}
console.log(nums.every(positiveNumber));

// 2. Determine if every word shorter than 8 characters
function shorterThanEight(word) {
  const length = word.length;
  return length < 8;
}
console.log(panagram.every(shorterThanEight));
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// Filter
// 1. Filter the array for numbers less than 4
function moreThanFour(number) {
  return number < 4;
}
console.log(nums.filter(moreThanFour));

// 2. Filter words that have an even length
function evenLength(word) {
  const length = word.length;
  return length % 2 === 0;
}
console.log(panagram.filter(evenLength));
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// Find
// 1. Find the first value divisible by 5
function divisibleByFive(number) {
  return number % 5 === 0;
}
console.log(nums.find(divisibleByFive));

// 2. find the first word that is longer than 5 characters
function longerThanFive(word) {
  const length = word.length;
  return length > 5;
}
console.log(panagram.find(longerThanFive));
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// 1. Find the index of the first number that is divisible by 3
function divisibleByThree(number) {
  return number % 3 === 0;
}
console.log(nums.findIndex(divisibleByThree));

// 2. Find the index of the first word that is less than 2 characters long
function lessThanTwo(text) {
  let length = text.length;
  length < 2;
}
console.log(panagram.findIndex(lessThanTwo));
// returns -1 as it can't find any word less than 2 characters long.
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// For Each
// 1. console.log each value of the nums array multiplied by 3
for (const number of nums) {
  console.log(number * 3);
}

// 2. console.log each word with an exclamation point at the end of it
for (const word of panagram) {
  console.log(`${word}!`);
}
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// Map
// 1. Make a new array of each number multiplied by 100
function timesHundred(number) {
  return number * 100;
}
console.log(nums.map(timesHundred));

// 2. Make a new array of all the words in all uppercase
function upperCase(word) {
  return word.toUpperCase();
}
console.log(panagram.map(upperCase));
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// Some
// 1. Find out if some numbers are divisible by 7
function divisibleBySeven(number) {
  return number % 7 === 0;
}
console.log(nums.some(divisibleBySeven));

// 2. Find out if some words have the letter a in them
function containsA(word) {
  const includesA = word.includes("a");
  return includesA;
}
console.log(panagram.some(containsA));
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// Hungry for More
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// Reduce
// 1. Add all the numbers in the array together using the reduce method
function add(total, value) {
  return (total += value);
}
console.log(nums.reduce(add));

// 2. Concatenate all the words using reduce
console.log(panagram.reduce(add));
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// Sort
// 1. Try to sort without any arguments, do you get what you'd expect with the numbers array?
console.log(nums.sort());
// sorts according to the first digit of the number in ascending order.

// 2. Try to sort without any arguments, do you get what you'd expect with the words array?
console.log(panagram.sort());
// No

// 3. Sort the numbers in ascending order
console.log(
  nums.sort(function (a, b) {
    return a - b;
  })
);
// 4. Sort the numbers in descending order
console.log(
  nums.sort(function (a, b) {
    return b - a;
  })
);
// 5. Sort the words in ascending order
console.log(
  panagram.sort(function (a, b) {
    return a.localeCompare(b);
  })
);
// 6. Sort the words in descending order
console.log(
  panagram.sort(function (a, b) {
    return b.localeCompare(a);
  })
);
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// isPanagram
function isPanagram(array) {
  const combinedSentence = array.join("").toLowerCase();
  return combinedSentence;
}
console.log(
  isPanagram(panagram).includes(
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z"
  )
);
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// Working with data
const products = [
  {
    name: "allen wrench",
    price: 2.99,
    description: "handy tool",
  },
  {
    name: "cornucopia",
    price: 5.99,
    description: "festive holiday decoration",
  },
  {
    name: "banana",
    price: 0.99,
    description: "full of potassium",
  },
  {
    name: "guillotine (cigar)",
    price: 10.59,
    description: "behead your stub",
  },
  {
    name: "jack-o-lantern",
    price: 3.99,
    description: "spooky seasonal fun",
  },
  {
    name: "doggie treat (box)",
    price: 5.99,
    description: "fido loves 'em",
  },
  {
    name: "egg separator",
    price: 3.99,
    description: "it separates yolks from whites",
  },
  {
    name: "LED lightbulb",
    price: 6.55,
    description: "It's super-efficient!",
  },
  {
    name: "owl pellets",
    price: 3.99,
    description: "Don't ask what they used to be.",
  },
  {
    name: "flag",
    price: 5.99,
    description: "catches the breeze",
  },
  {
    name: "hair brush",
    price: 6.99,
    description: "fine boar bristles",
  },
  {
    name: "iridium (one gram)",
    price: 19.36,
    description: "corrosion-resistant metal",
  },
  {
    name: "quark",
    price: 0.01,
    description: "Very small",
  },
  {
    name: "turtleneck",
    price: 19.99,
    description: "available in black and slightly-darker black",
  },
  {
    name: "kaleidoscope",
    price: 8.25,
    description: "tube with moving plastic pieces inside",
  },
  {
    name: "mitt (leather)",
    price: 15,
    description: "regulation sized",
  },
  {
    name: "nothing",
    price: 10,
    description: "Hey, if you pay us, we won't ask any questions.",
  },
  {
    name: "violin",
    price: 2000,
    description: "Talk about a JS fiddle...",
  },
  {
    name: "yoyo",
    price: 1,
    description: "We had to pull some strings to get this one in.",
  },
  {
    name: "pincushion",
    price: 1.99,
    description: "You'll get 'stuck' on it",
  },
];

// 1, Filter for products with a price that is less than 10, using the array below:
function lessThanTen(item) {
  return item.price < 10;
}
console.log(products.filter(lessThanTen));

// 2. Sort alphabetically by product name
console.log(
  products.sort(function (a, b) {
    return a.name.localeCompare(b.name);
  })
);
////////////////////////////////////////////////////////////////////////////////////////
