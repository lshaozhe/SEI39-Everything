import React, { useEffect, useState } from "react";
import LoadingSpinner from "./LoadingSpinner";

const ReactApp = () => {
  const [selection, setSelection] = useState("1");
  const [post, setPost] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchPost = async (url) => {
    setIsLoading(true);
    setError(null);
    setPost(null);

    try {
      const res = await fetch(url);

      if (res.status !== 200) {
        throw new Error("Something went wrong.");
      }

      const data = await res.json();

      setPost({
        id: data.id,
        title: data.title,
        body: data.body,
      });
    } catch (err) {
      setError(err.message);
    }

    setIsLoading(false);
  };

  
  const handleSelectionChange = (event) => {
    setSelection(event.target.value);
  };

  useEffect(() => {
    const url = "https://jsonplaceholder.typicode.com/posts/" + 
                 selection;
    fetchPost(url);
  }, [selection]);

  return (
    <div className="container">
      <section>
        <h2>Selection</h2>
        <div className="row">
          <select
            id="selection"
            onChange={handleSelectionChange}
            className="col-md-12"
          >
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
          </select>
        </div>
      </section>

      <br />

      <section>
        {!isLoading && post && (
          <React.Fragment>
            <div>ID: {post.id}</div>
            <div>Title: {post.title}</div>
            <div>Body: {post.body}</div>
          </React.Fragment>
        )}
        
        {isLoading && <p>Loading... please wait</p>}

        {isLoading && (
          <div className="centered">
            <LoadingSpinner />
          </div>
        )}

        {!isLoading && error && <p>{error}</p>}
      </section>
    </div>
  );
};

export default ReactApp;